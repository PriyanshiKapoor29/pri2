import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

def train_and_evaluate_logistic_regression(csv_file, features, target):
    """
    Trains and evaluates a logistic regression classifier for clothing item categorization.

    Args:
        csv_file (str): Path to the CSV file.
        features (list): List of feature column names.
        target (str): Name of the target (label) column.
    """
    try:
        df = pd.read_csv(csv_file)

        # Handle categorical target variables
        label_encoder = LabelEncoder()
        df[target] = label_encoder.fit_transform(df[target])

        X = df[features]
        y = df[target]

        # Handle missing values (if any)
        X = X.fillna(X.mean()) #Or use other imputation methods

        # Scale features
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Split data into training and testing sets
        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

        # Train logistic regression model
        model = LogisticRegression(max_iter=1000, solver='lbfgs', multi_class='auto') #adjust max_iter if needed
        model.fit(X_train, y_train)

        # Make predictions
        y_pred = model.predict(X_test)

        # Evaluate the model
        accuracy = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred)

        print(f"Accuracy: {accuracy}")
        print("Classification Report:\n", report)

    except FileNotFoundError:
        print(f"Error: CSV file not found at {csv_file}")
    except KeyError as e:
        print(f"Error: Column '{e.args[0]}' not found in the CSV file.")
    except Exception as e:
        print(f"An error occurred: {e}")

csv_file_path = 'clothing_data.csv'
feature_columns = ['feature1', 'feature2', 'feature3'] 
target_column = 'category'

train_and_evaluate_logistic_regression(csv_file_path, feature_columns, target_column)
